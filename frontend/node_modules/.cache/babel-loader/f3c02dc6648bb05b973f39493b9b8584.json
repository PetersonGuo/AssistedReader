{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/petersonguo/Documents/Projects/AssistedReader/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _toConsumableArray = require(\"/home/petersonguo/Documents/Projects/AssistedReader/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _objectSpread = require(\"/home/petersonguo/Documents/Projects/AssistedReader/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _objectWithoutProperties = require(\"/home/petersonguo/Documents/Projects/AssistedReader/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\nvar _asyncToGenerator = require(\"/home/petersonguo/Documents/Projects/AssistedReader/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _excluded = [\"logger\", \"errorHandler\"];\nvar resolvePaths = require('./utils/resolvePaths');\nvar circularize = require('./utils/circularize');\nvar createJob = require('./createJob');\nvar _require = require('./utils/log'),\n  log = _require.log;\nvar getId = require('./utils/getId');\nvar OEM = require('./constants/OEM');\nvar _require2 = require('./worker/node'),\n  defaultOptions = _require2.defaultOptions,\n  spawnWorker = _require2.spawnWorker,\n  terminateWorker = _require2.terminateWorker,\n  onMessage = _require2.onMessage,\n  loadImage = _require2.loadImage,\n  send = _require2.send;\nvar workerCounter = 0;\nmodule.exports = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n  var langs,\n    oem,\n    _options,\n    config,\n    id,\n    _resolvePaths,\n    logger,\n    errorHandler,\n    options,\n    resolves,\n    rejects,\n    currentLangs,\n    currentOem,\n    currentConfig,\n    lstmOnlyCore,\n    workerResReject,\n    workerResResolve,\n    workerRes,\n    workerError,\n    worker,\n    setResolve,\n    setReject,\n    startJob,\n    load,\n    loadInternal,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    loadLanguageInternal,\n    initialize,\n    initializeInternal,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n    resolveObj,\n    _args4 = arguments;\n  return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          langs = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 'eng';\n          oem = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : OEM.LSTM_ONLY;\n          _options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n          config = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};\n          id = getId('Worker', workerCounter);\n          _resolvePaths = resolvePaths(_objectSpread(_objectSpread({}, defaultOptions), _options)), logger = _resolvePaths.logger, errorHandler = _resolvePaths.errorHandler, options = _objectWithoutProperties(_resolvePaths, _excluded);\n          resolves = {};\n          rejects = {}; // Current langs, oem, and config file.\n          // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n          currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n          currentOem = oem;\n          currentConfig = config;\n          lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n          workerRes = new Promise(function (resolve, reject) {\n            workerResResolve = resolve;\n            workerResReject = reject;\n          });\n          workerError = function workerError(event) {\n            workerResReject(event.message);\n          };\n          worker = spawnWorker(options);\n          worker.onerror = workerError;\n          workerCounter += 1;\n          setResolve = function setResolve(action, res) {\n            resolves[action] = res;\n          };\n          setReject = function setReject(action, rej) {\n            rejects[action] = rej;\n          };\n          startJob = function startJob(_ref2) {\n            var jobId = _ref2.id,\n              action = _ref2.action,\n              payload = _ref2.payload;\n            return new Promise(function (resolve, reject) {\n              log(\"[\".concat(id, \"]: Start \").concat(jobId, \", action=\").concat(action));\n              setResolve(action, resolve);\n              setReject(action, reject);\n              send(worker, {\n                workerId: id,\n                jobId: jobId,\n                action: action,\n                payload: payload\n              });\n            });\n          };\n          load = function load() {\n            return console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)');\n          };\n          loadInternal = function loadInternal(jobId) {\n            return startJob(createJob({\n              id: jobId,\n              action: 'load',\n              payload: {\n                options: {\n                  lstmOnly: lstmOnlyCore,\n                  corePath: options.corePath,\n                  logging: options.logging\n                }\n              }\n            }));\n          };\n          writeText = function writeText(path, text, jobId) {\n            return startJob(createJob({\n              id: jobId,\n              action: 'FS',\n              payload: {\n                method: 'writeFile',\n                args: [path, text]\n              }\n            }));\n          };\n          readText = function readText(path, jobId) {\n            return startJob(createJob({\n              id: jobId,\n              action: 'FS',\n              payload: {\n                method: 'readFile',\n                args: [path, {\n                  encoding: 'utf8'\n                }]\n              }\n            }));\n          };\n          removeFile = function removeFile(path, jobId) {\n            return startJob(createJob({\n              id: jobId,\n              action: 'FS',\n              payload: {\n                method: 'unlink',\n                args: [path]\n              }\n            }));\n          };\n          FS = function FS(method, args, jobId) {\n            return startJob(createJob({\n              id: jobId,\n              action: 'FS',\n              payload: {\n                method: method,\n                args: args\n              }\n            }));\n          };\n          loadLanguage = function loadLanguage() {\n            return console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)');\n          };\n          loadLanguageInternal = function loadLanguageInternal(_langs, jobId) {\n            return startJob(createJob({\n              id: jobId,\n              action: 'loadLanguage',\n              payload: {\n                langs: _langs,\n                options: {\n                  langPath: options.langPath,\n                  dataPath: options.dataPath,\n                  cachePath: options.cachePath,\n                  cacheMethod: options.cacheMethod,\n                  gzip: options.gzip,\n                  lstmOnly: [OEM.LSTM_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(currentOem) && !options.legacyLang\n                }\n              }\n            }));\n          };\n          initialize = function initialize() {\n            return console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)');\n          };\n          initializeInternal = function initializeInternal(_langs, _oem, _config, jobId) {\n            return startJob(createJob({\n              id: jobId,\n              action: 'initialize',\n              payload: {\n                langs: _langs,\n                oem: _oem,\n                config: _config\n              }\n            }));\n          };\n          reinitialize = function reinitialize() {\n            var langs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eng';\n            var oem = arguments.length > 1 ? arguments[1] : undefined;\n            var config = arguments.length > 2 ? arguments[2] : undefined;\n            var jobId = arguments.length > 3 ? arguments[3] : undefined;\n            // eslint-disable-line\n\n            if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n            var _oem = oem || currentOem;\n            currentOem = _oem;\n            var _config = config || currentConfig;\n            currentConfig = _config;\n\n            // Only load langs that are not already loaded.\n            // This logic fails if the user downloaded the LSTM-only English data for a language\n            // and then uses `worker.reinitialize` to switch to the Legacy engine.\n            // However, the correct data will still be downloaded after initialization fails\n            // and this can be avoided entirely if the user loads the correct data ahead of time.\n            var langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n            var _langs = langsArr.filter(function (x) {\n              return !currentLangs.includes(x);\n            });\n            currentLangs.push.apply(currentLangs, _toConsumableArray(_langs));\n            if (_langs.length > 0) {\n              return loadLanguageInternal(_langs, jobId).then(function () {\n                return initializeInternal(langs, _oem, _config, jobId);\n              });\n            }\n            return initializeInternal(langs, _oem, _config, jobId);\n          };\n          setParameters = function setParameters() {\n            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var jobId = arguments.length > 1 ? arguments[1] : undefined;\n            return startJob(createJob({\n              id: jobId,\n              action: 'setParameters',\n              payload: {\n                params: params\n              }\n            }));\n          };\n          recognize = /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(image) {\n              var opts,\n                output,\n                jobId,\n                _args = arguments;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                      output = _args.length > 2 && _args[2] !== undefined ? _args[2] : {\n                        blocks: true,\n                        text: true,\n                        hocr: true,\n                        tsv: true\n                      };\n                      jobId = _args.length > 3 ? _args[3] : undefined;\n                      _context.t0 = startJob;\n                      _context.t1 = createJob;\n                      _context.t2 = jobId;\n                      _context.next = 8;\n                      return loadImage(image);\n                    case 8:\n                      _context.t3 = _context.sent;\n                      _context.t4 = opts;\n                      _context.t5 = output;\n                      _context.t6 = {\n                        image: _context.t3,\n                        options: _context.t4,\n                        output: _context.t5\n                      };\n                      _context.t7 = {\n                        id: _context.t2,\n                        action: 'recognize',\n                        payload: _context.t6\n                      };\n                      _context.t8 = (0, _context.t1)(_context.t7);\n                      return _context.abrupt(\"return\", (0, _context.t0)(_context.t8));\n                    case 15:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n            return function recognize(_x) {\n              return _ref3.apply(this, arguments);\n            };\n          }();\n          getPDF = function getPDF() {\n            var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tesseract OCR Result';\n            var textonly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var jobId = arguments.length > 2 ? arguments[2] : undefined;\n            console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n            return startJob(createJob({\n              id: jobId,\n              action: 'getPDF',\n              payload: {\n                title: title,\n                textonly: textonly\n              }\n            }));\n          };\n          detect = /*#__PURE__*/function () {\n            var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(image, jobId) {\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      if (!lstmOnlyCore) {\n                        _context2.next = 2;\n                        break;\n                      }\n                      throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n                    case 2:\n                      _context2.t0 = startJob;\n                      _context2.t1 = createJob;\n                      _context2.t2 = jobId;\n                      _context2.next = 7;\n                      return loadImage(image);\n                    case 7:\n                      _context2.t3 = _context2.sent;\n                      _context2.t4 = {\n                        image: _context2.t3\n                      };\n                      _context2.t5 = {\n                        id: _context2.t2,\n                        action: 'detect',\n                        payload: _context2.t4\n                      };\n                      _context2.t6 = (0, _context2.t1)(_context2.t5);\n                      return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t6));\n                    case 12:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n            return function detect(_x2, _x3) {\n              return _ref4.apply(this, arguments);\n            };\n          }();\n          terminate = /*#__PURE__*/function () {\n            var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n              return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      if (worker !== null) {\n                        /*\n                        await startJob(createJob({\n                          id: jobId,\n                          action: 'terminate',\n                        }));\n                        */\n                        terminateWorker(worker);\n                        worker = null;\n                      }\n                      return _context3.abrupt(\"return\", Promise.resolve());\n                    case 2:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3);\n            }));\n            return function terminate() {\n              return _ref5.apply(this, arguments);\n            };\n          }();\n          onMessage(worker, function (_ref6) {\n            var workerId = _ref6.workerId,\n              jobId = _ref6.jobId,\n              status = _ref6.status,\n              action = _ref6.action,\n              data = _ref6.data;\n            if (status === 'resolve') {\n              log(\"[\".concat(workerId, \"]: Complete \").concat(jobId));\n              var d = data;\n              if (action === 'recognize') {\n                d = circularize(data);\n              } else if (action === 'getPDF') {\n                d = Array.from(_objectSpread(_objectSpread({}, data), {}, {\n                  length: Object.keys(data).length\n                }));\n              }\n              resolves[action]({\n                jobId: jobId,\n                data: d\n              });\n            } else if (status === 'reject') {\n              rejects[action](data);\n              if (action === 'load') workerResReject(data);\n              if (errorHandler) {\n                errorHandler(data);\n              } else {\n                throw Error(data);\n              }\n            } else if (status === 'progress') {\n              logger(_objectSpread(_objectSpread({}, data), {}, {\n                userJobId: jobId\n              }));\n            }\n          });\n          resolveObj = {\n            id: id,\n            worker: worker,\n            setResolve: setResolve,\n            setReject: setReject,\n            load: load,\n            writeText: writeText,\n            readText: readText,\n            removeFile: removeFile,\n            FS: FS,\n            loadLanguage: loadLanguage,\n            initialize: initialize,\n            reinitialize: reinitialize,\n            setParameters: setParameters,\n            recognize: recognize,\n            getPDF: getPDF,\n            detect: detect,\n            terminate: terminate\n          };\n          loadInternal().then(function () {\n            return loadLanguageInternal(langs);\n          }).then(function () {\n            return initializeInternal(langs, oem, config);\n          }).then(function () {\n            return workerResResolve(resolveObj);\n          }).catch(function () {});\n          return _context4.abrupt(\"return\", workerRes);\n        case 40:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _callee4);\n}));","map":{"version":3,"names":["resolvePaths","require","circularize","createJob","log","getId","OEM","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","module","exports","langs","oem","LSTM_ONLY","_options","config","id","logger","errorHandler","options","resolves","rejects","currentLangs","split","currentOem","currentConfig","lstmOnlyCore","DEFAULT","includes","legacyCore","workerRes","Promise","resolve","reject","workerResResolve","workerResReject","workerError","event","message","worker","onerror","setResolve","action","res","setReject","rej","startJob","jobId","payload","workerId","load","console","warn","loadInternal","lstmOnly","corePath","logging","writeText","path","text","method","args","readText","encoding","removeFile","FS","loadLanguage","loadLanguageInternal","_langs","langPath","dataPath","cachePath","cacheMethod","gzip","TESSERACT_LSTM_COMBINED","legacyLang","initialize","initializeInternal","_oem","_config","reinitialize","TESSERACT_ONLY","Error","langsArr","filter","x","push","length","then","setParameters","params","recognize","image","opts","output","blocks","hocr","tsv","getPDF","title","textonly","detect","terminate","status","data","d","Array","from","Object","keys","userJobId","resolveObj","catch"],"sources":["/home/petersonguo/Documents/Projects/AssistedReader/node_modules/tesseract.js/src/createWorker.js"],"sourcesContent":["const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst OEM = require('./constants/OEM');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (langs = 'eng', oem = OEM.LSTM_ONLY, _options = {}, config = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n\n  // Current langs, oem, and config file.\n  // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n  const currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n  let currentOem = oem;\n  let currentConfig = config;\n  const lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options: { lstmOnly: lstmOnlyCore, corePath: options.corePath, logging: options.logging } },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = () => (\n    console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)')\n  );\n\n  const loadLanguageInternal = (_langs, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs: _langs,\n      options: {\n        langPath: options.langPath,\n        dataPath: options.dataPath,\n        cachePath: options.cachePath,\n        cacheMethod: options.cacheMethod,\n        gzip: options.gzip,\n        lstmOnly: [OEM.LSTM_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(currentOem)\n          && !options.legacyLang,\n      },\n    },\n  }));\n\n  const initialize = () => (\n    console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)')\n  );\n\n  const initializeInternal = (_langs, _oem, _config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs: _langs, oem: _oem, config: _config },\n    }))\n  );\n\n  const reinitialize = (langs = 'eng', oem, config, jobId) => { // eslint-disable-line\n\n    if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n\n    const _oem = oem || currentOem;\n    currentOem = _oem;\n\n    const _config = config || currentConfig;\n    currentConfig = _config;\n\n    // Only load langs that are not already loaded.\n    // This logic fails if the user downloaded the LSTM-only English data for a language\n    // and then uses `worker.reinitialize` to switch to the Legacy engine.\n    // However, the correct data will still be downloaded after initialization fails\n    // and this can be avoided entirely if the user loads the correct data ahead of time.\n    const langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n    const _langs = langsArr.filter((x) => !currentLangs.includes(x));\n    currentLangs.push(..._langs);\n\n    if (_langs.length > 0) {\n      return loadLanguageInternal(_langs, jobId)\n        .then(() => initializeInternal(langs, _oem, _config, jobId));\n    }\n\n    return initializeInternal(langs, _oem, _config, jobId);\n  };\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    blocks: true, text: true, hocr: true, tsv: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }));\n  };\n\n  const detect = async (image, jobId) => {\n    if (lstmOnlyCore) throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n\n    return startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }));\n  };\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n\n  loadInternal()\n    .then(() => loadLanguageInternal(langs))\n    .then(() => initializeInternal(langs, oem, config))\n    .then(() => workerResResolve(resolveObj))\n    .catch(() => {});\n\n  return workerRes;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}