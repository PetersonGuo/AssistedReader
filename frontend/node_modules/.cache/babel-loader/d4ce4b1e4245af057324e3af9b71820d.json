{"ast":null,"code":"var _jsxFileName = \"/home/petersonguo/Documents/Hackathons/AssistedReader/src/components/Cam.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Cam.css';\nimport Webcam from \"react-webcam\";\nimport Tesseract from \"tesseract.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videoConstraints = {\n  width: 440,\n  height: 400,\n  facingMode: \"user\"\n};\nexport default function Cam() {\n  _s();\n  const webcamRef = React.useRef(null);\n  const [text, setText] = useState(\"\");\n  const [toggle, setToggle] = useState(true);\n  const msg = new SpeechSynthesisUtterance();\n  useEffect(() => {\n    const interval = setTimeout(() => {\n      const imageSrc = webcamRef.current.getScreenshot();\n      Tesseract.recognize(imageSrc, 'eng', {\n        logger: m => m\n      }).catch(x => {\n        console.error(x);\n      }).then(result => {\n        let txt = \"\";\n        console.log(result.data.text + \": \" + result.data.confidence);\n        if (result.data.confidence > 50) {\n          txt = result.data.text.replaceAll('[^\\w\\d\\s.,!?]', '');\n          console.log(txt);\n        }\n        console.log('speech: ' + text);\n        if (txt.length > 0) {\n          setText(txt);\n          msg.text = txt;\n          if (!toggle) window.speechSynthesis.speak(msg);\n        }\n      });\n    }, 200);\n    return () => clearInterval(interval);\n  }, [webcamRef.current, text, toggle]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-[40px] justify-center items-center flex\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"font-[30px] mt-[15px]\",\n        children: \"Extracted Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n        audio: false,\n        ref: webcamRef,\n        screenshotFormat: \"image/jpeg\",\n        videoConstraints: videoConstraints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-box extractedText flex justify-center\",\n        children: [\" \", text, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setToggle(!toggle);\n        },\n        className: \"h-[50] m-5\",\n        children: toggle ? 'Start Reading' : 'Stop Reading'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(Cam, \"nl+ZXntqFAuwwwmMFW1R6K9e8lI=\");\n_c = Cam;\nvar _c;\n$RefreshReg$(_c, \"Cam\");","map":{"version":3,"names":["React","useState","useEffect","Webcam","Tesseract","videoConstraints","width","height","facingMode","Cam","webcamRef","useRef","text","setText","toggle","setToggle","msg","SpeechSynthesisUtterance","interval","setTimeout","imageSrc","current","getScreenshot","recognize","logger","m","catch","x","console","error","then","result","txt","log","data","confidence","replaceAll","length","window","speechSynthesis","speak","clearInterval"],"sources":["/home/petersonguo/Documents/Hackathons/AssistedReader/src/components/Cam.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './Cam.css';\nimport Webcam from \"react-webcam\";\nimport Tesseract from \"tesseract.js\";\n\nconst videoConstraints = {\n    width: 440,\n    height: 400,\n    facingMode: \"user\"\n};\n\nexport default function Cam() {\n    const webcamRef = React.useRef(null);\n    const [text, setText] = useState(\"\");\n    const [toggle, setToggle] = useState(true);\n\n    const msg = new SpeechSynthesisUtterance();\n\n    useEffect (() => {\n        const interval = setTimeout(() => {\n        const imageSrc = webcamRef.current.getScreenshot();\n            Tesseract.recognize(\n                imageSrc, 'eng',\n                {\n                    logger: m => m\n                }\n            )\n                .catch (x => {\n                    console.error(x);\n                })\n                .then(result => {\n                    let txt = \"\";\n                    console.log(result.data.text + \": \" + result.data.confidence);\n                    if (result.data.confidence > 50) {\n                        txt = result.data.text.replaceAll('[^\\w\\d\\s.,!?]', '');\n                        console.log(txt);\n                    }\n\n                    console.log('speech: ' + text);\n                    if (txt.length > 0) {\n                        setText(txt);\n                        msg.text = txt;\n                        if (!toggle) window.speechSynthesis.speak(msg);\n                    }\n                });\n        }, 200);\n            return () => clearInterval(interval);\n        }, [webcamRef.current, text, toggle]);\n\n    return (\n        <div className={\"my-[40px] justify-center items-center flex\"}>\n            <main className=\"items-center\">\n                <h1 className={\"font-[30px] mt-[15px]\"}>Extracted Text</h1>\n                <Webcam\n                    audio={false}\n                    ref={webcamRef}\n                    screenshotFormat=\"image/jpeg\"\n                    videoConstraints={videoConstraints} />\n                <p className=\"text-box extractedText flex justify-center\"> {text} </p>\n                <button onClick={()=> {setToggle(!toggle)}} className={\"h-[50] m-5\"}>\n                    {toggle?'Start Reading':'Stop Reading'}\n                </button>\n            </main>\n        </div>\n    );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,SAAS,MAAM,cAAc;AAAC;AAErC,MAAMC,gBAAgB,GAAG;EACrBC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,UAAU,EAAE;AAChB,CAAC;AAED,eAAe,SAASC,GAAG,GAAG;EAAA;EAC1B,MAAMC,SAAS,GAAGV,KAAK,CAACW,MAAM,CAAC,IAAI,CAAC;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMe,GAAG,GAAG,IAAIC,wBAAwB,EAAE;EAE1Cf,SAAS,CAAE,MAAM;IACb,MAAMgB,QAAQ,GAAGC,UAAU,CAAC,MAAM;MAClC,MAAMC,QAAQ,GAAGV,SAAS,CAACW,OAAO,CAACC,aAAa,EAAE;MAC9ClB,SAAS,CAACmB,SAAS,CACfH,QAAQ,EAAE,KAAK,EACf;QACII,MAAM,EAAEC,CAAC,IAAIA;MACjB,CAAC,CACJ,CACIC,KAAK,CAAEC,CAAC,IAAI;QACTC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MACpB,CAAC,CAAC,CACDG,IAAI,CAACC,MAAM,IAAI;QACZ,IAAIC,GAAG,GAAG,EAAE;QACZJ,OAAO,CAACK,GAAG,CAACF,MAAM,CAACG,IAAI,CAACtB,IAAI,GAAG,IAAI,GAAGmB,MAAM,CAACG,IAAI,CAACC,UAAU,CAAC;QAC7D,IAAIJ,MAAM,CAACG,IAAI,CAACC,UAAU,GAAG,EAAE,EAAE;UAC7BH,GAAG,GAAGD,MAAM,CAACG,IAAI,CAACtB,IAAI,CAACwB,UAAU,CAAC,eAAe,EAAE,EAAE,CAAC;UACtDR,OAAO,CAACK,GAAG,CAACD,GAAG,CAAC;QACpB;QAEAJ,OAAO,CAACK,GAAG,CAAC,UAAU,GAAGrB,IAAI,CAAC;QAC9B,IAAIoB,GAAG,CAACK,MAAM,GAAG,CAAC,EAAE;UAChBxB,OAAO,CAACmB,GAAG,CAAC;UACZhB,GAAG,CAACJ,IAAI,GAAGoB,GAAG;UACd,IAAI,CAAClB,MAAM,EAAEwB,MAAM,CAACC,eAAe,CAACC,KAAK,CAACxB,GAAG,CAAC;QAClD;MACJ,CAAC,CAAC;IACV,CAAC,EAAE,GAAG,CAAC;IACH,OAAO,MAAMyB,aAAa,CAACvB,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACR,SAAS,CAACW,OAAO,EAAET,IAAI,EAAEE,MAAM,CAAC,CAAC;EAEzC,oBACI;IAAK,SAAS,EAAE,4CAA6C;IAAA,uBACzD;MAAM,SAAS,EAAC,cAAc;MAAA,wBAC1B;QAAI,SAAS,EAAE,uBAAwB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB,eAC3D,QAAC,MAAM;QACH,KAAK,EAAE,KAAM;QACb,GAAG,EAAEJ,SAAU;QACf,gBAAgB,EAAC,YAAY;QAC7B,gBAAgB,EAAEL;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAG,eAC1C;QAAG,SAAS,EAAC,4CAA4C;QAAA,gBAAGO,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,eACtE;QAAQ,OAAO,EAAE,MAAK;UAACG,SAAS,CAAC,CAACD,MAAM,CAAC;QAAA,CAAE;QAAC,SAAS,EAAE,YAAa;QAAA,UAC/DA,MAAM,GAAC,eAAe,GAAC;MAAc;QAAA;QAAA;QAAA;MAAA,QACjC;IAAA;MAAA;MAAA;MAAA;IAAA;EACN;IAAA;IAAA;IAAA;EAAA,QACL;AAEd;AAAC,GAtDuBL,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}